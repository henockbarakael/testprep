datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
  engineType = "library"
}

// ENUMS
enum UserRole {
  PARENT
  CHILD
}

enum SubjectName {
  ELA
  Math
}

enum GradeLevel {
  GRADE_1
  GRADE_2
  GRADE_3
  GRADE_4
  GRADE_5
  GRADE_6
  GRADE_7
  GRADE_8
}

enum PrismaQuestionType {
  MULTIPLE_CHOICE
  TEXT
  FILL_IN_THE_BLANK
  WRITING
  IMAGE_CHOICE
  DRAWING
  PATTERN
  MATCHING
  CLOCK
  COMPARISON
  GRAMMAR
  WORD_SORT
  FRACTION
}

// MODELS
model User {
  id           String    @id @default(cuid())
  email        String?   @unique
  passwordHash String?
  role         UserRole
  childName    String?
  accessCode   String?   @unique
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  grade        GradeLevel?
  currentSubject SubjectName?
  sessions     Session[]

  // Relations parent-enfant
  parentId     String?   // Nouveau champ
  parent       User?     @relation("ParentChildren", fields: [parentId], references: [id])
  children     User[]    @relation("ParentChildren")

  parentAssessments Assessment[] @relation("ParentAssessments")
  childAssessments  Assessment[] @relation("ChildAssessments")
}



model Subject {
  id        String      @id @default(cuid())
  name      SubjectName @unique
  questions Question[]
}

model Grade {
  id        String     @id @default(cuid())
  level     GradeLevel @unique
  questions Question[]
}

model Question {
  id                 String                @id @default(cuid())
  questionType       PrismaQuestionType    @map("type") // Mapped from 'type' to avoid reserved keyword issues
  questionText       String                @db.Text
  passage            String?               @db.Text
  imageUrl           String?
  category           String?
  blanksJson         String? // JSON string for fill-in-the-blank texts
  columnsJson        String? // JSON string for matching columns
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  dataAihint         String?
  isDrawing          Boolean?
  drawingQuestion    Boolean?

  subjectId          String
  subject            Subject               @relation(fields: [subjectId], references: [id])
  gradeId            String
  grade              Grade                 @relation(fields: [gradeId], references: [id])
  options            QuestionOption[]
  correctAnswers     QuestionCorrectAnswer[]
  assessmentAnswers  AssessmentAnswer[]
}

model QuestionOption {
  id         String   @id @default(cuid())
  value      String
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
}

model QuestionCorrectAnswer {
  id          String   @id @default(cuid())
  answerValue String   @db.Text // Can be a single string or JSON array string for multiple blanks/answers
  isPrimary   Boolean  @default(true) // Useful if one answer is preferred among multiple correct ones
  questionId  String
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
}

model Assessment {
  id             String             @id @default(cuid())
  parentUserId   String  // Nouveau champ spécifique pour le parent
  childUserId    String  // Nouveau champ spécifique pour l'enfant
  userRole       UserRole
  subjectName    SubjectName
  gradeLevel     GradeLevel
  score          Int
  totalQuestions Int
  takenAt        DateTime           @default(now())

  parentUser     User    @relation("ParentAssessments", fields: [parentUserId], references: [id])
  childUser      User    @relation("ChildAssessments", fields: [childUserId], references: [id])

  answers        AssessmentAnswer[]
}

model AssessmentAnswer {
  id              String   @id @default(cuid())
  assessmentId    String
  assessment      Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  questionId      String   // Storing the original Question CUID
  question        Question @relation(fields: [questionId], references: [id]) // Relation to the Question
  userAnswer      String   @db.Text // Can be a single string or JSON array string for multiple inputs
  isCorrect       Boolean
  submittedAt     DateTime @default(now())
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}